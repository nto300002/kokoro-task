// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./ERD.png"
// }

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  profile        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  emailVerified  DateTime? @map(name: "email_verified")
  hashedPassword String?
  role           String    @default("USER")

  sessions Session[]
  tokens   Token[]

  @@map(name: "users")
}

model Tweet {
  id        Int            @id @default(autoincrement())
  text      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  emotion   String
  comments  TweetComment[]
}

model TweetComment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   Int
}

model Task {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  title              String
  concentration_time Int?     @default(0)
  done               Boolean  @default(false)
  hearts             Heart[]
}

model Heart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  exp       Int?
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    Int
}

model Monitoring {
  id              Int      @id @default(autoincrement())
  createAt        DateTime @default(now())
  updateAt        DateTime @updatedAt
  condition_meter Int      @default(50)
  stamina         Int      @default(50)
  feeling         Int      @default(50)
  capacity        Int      @default(50)
  stress_meter    Int      @default(50)
  stress_contents String?
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}
